import { Repository } from 'typeorm';
import { Chat, ChatMessage } from '../entities/chat.entity';
import { Milestone } from '../entities/milestone.entity';
import { CreateChatDto, SendMessageDto, GenerateDesignDto, ListDesignDto, MakerProposalDto, EscrowActionDto } from '../dto/chat.dto';
import { PromptService } from './prompt.service';
import { OpenAIService } from './openai.service';
import { StreamChatService } from './stream-chat.service';
import { CloudinaryService } from '../../common/services/cloudinary.service';
import { UsersService } from '../../users/users.service';
export declare class ChatService {
    private chatRepository;
    private messageRepository;
    private milestoneRepository;
    private promptService;
    private openaiService;
    private streamChatService;
    private cloudinaryService;
    private usersService;
    private readonly logger;
    constructor(chatRepository: Repository<Chat>, messageRepository: Repository<ChatMessage>, milestoneRepository: Repository<Milestone>, promptService: PromptService, openaiService: OpenAIService, streamChatService: StreamChatService, cloudinaryService: CloudinaryService, usersService: UsersService);
    createChat(userId: string, dto: CreateChatDto): Promise<Chat>;
    getChats(userId: string): Promise<Chat[]>;
    getChat(userId: string, chatId: string): Promise<Chat>;
    sendMessage(userId: string, dto: SendMessageDto): Promise<ChatMessage>;
    generateDesign(dto: GenerateDesignDto): Promise<any>;
    listDesign(dto: ListDesignDto): Promise<any>;
    addMakerProposal(dto: MakerProposalDto): Promise<any>;
    handleEscrowAction(dto: EscrowActionDto): Promise<any>;
    private processUserMessage;
    private processStateTransition;
    private autoGenerateDesign;
    private addSystemMessage;
    private addAssistantMessage;
    private createMilestones;
}
