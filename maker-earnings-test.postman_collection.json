{
  "info": {
    "name": "Maker Earnings Test",
    "description": "Test collection for /users/maker/earnings endpoint",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Maker Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"samueladelowo3@gmail.com\",\n  \"password\": \"Password123!\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login",
          "host": ["{{base_url}}"],
          "path": ["auth", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('jwt_token', response.data.access_token);",
              "    pm.test('Login successful', function () {",
              "        pm.response.to.have.status(200);",
              "    });",
              "} else {",
              "    pm.test('Login failed', function () {",
              "        pm.response.to.have.status(200);",
              "    });",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "2. Get Maker Earnings",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/users/maker/earnings",
          "host": ["{{base_url}}"],
          "path": ["users", "maker", "earnings"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has earnings data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('totalEarnings');",
              "    pm.expect(jsonData.data).to.have.property('pendingEarnings');",
              "    pm.expect(jsonData.data).to.have.property('availableEarnings');",
              "    pm.expect(jsonData.data).to.have.property('totalJobsCompleted');",
              "    pm.expect(jsonData.data).to.have.property('recentActivities');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "3. Test RBAC - Creator Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"creator@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login",
          "host": ["{{base_url}}"],
          "path": ["auth", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('jwt_token', response.data.access_token);",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "4. Test RBAC - Creator Access (Should Fail)",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/users/maker/earnings",
          "host": ["{{base_url}}"],
          "path": ["users", "maker", "earnings"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Creator access should be denied', function () {",
              "    pm.response.to.have.status(403);",
              "});",
              "",
              "pm.test('Error message should mention forbidden', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include('Forbidden');",
              "});"
            ]
          }
        }
      ]
    }
  ]
}