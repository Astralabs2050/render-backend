{
	"info": {
		"name": "Maker Earnings API",
		"description": "Test collection for maker earnings endpoint with RBAC validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "makerEmail",
			"value": "samueladelowo3@gmail.com",
			"type": "string"
		},
		{
			"key": "makerPassword",
			"value": "password123",
			"type": "string"
		},
		{
			"key": "creatorEmail",
			"value": "creator@example.com",
			"type": "string"
		},
		{
			"key": "creatorPassword",
			"value": "password123",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login as Maker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.status && response.data.access_token) {",
									"        pm.collectionVariables.set('authToken', response.data.access_token);",
									"        pm.test('Login successful', () => {",
									"            pm.expect(response.status).to.be.true;",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{makerEmail}}\",\n  \"password\": \"{{makerPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "Login as Creator (for RBAC test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.status && response.data.access_token) {",
									"        pm.collectionVariables.set('authToken', response.data.access_token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{creatorEmail}}\",\n  \"password\": \"{{creatorPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					}
				}
			]
		},
		{
			"name": "Maker Earnings",
			"item": [
				{
					"name": "Get Maker Earnings - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has correct structure', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('status', true);",
									"    pm.expect(response).to.have.property('message', 'Earnings retrieved successfully');",
									"    pm.expect(response).to.have.property('data');",
									"});",
									"",
									"pm.test('Earnings data structure is correct', () => {",
									"    const data = pm.response.json().data;",
									"    pm.expect(data).to.have.property('totalEarnings');",
									"    pm.expect(data).to.have.property('pendingEarnings');",
									"    pm.expect(data).to.have.property('availableEarnings');",
									"    pm.expect(data).to.have.property('totalJobsCompleted');",
									"    pm.expect(data).to.have.property('recentActivities');",
									"    pm.expect(data.recentActivities).to.be.an('array');",
									"});",
									"",
									"pm.test('Earnings values are numbers', () => {",
									"    const data = pm.response.json().data;",
									"    pm.expect(data.totalEarnings).to.be.a('number');",
									"    pm.expect(data.pendingEarnings).to.be.a('number');",
									"    pm.expect(data.availableEarnings).to.be.a('number');",
									"    pm.expect(data.totalJobsCompleted).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/maker/earnings",
							"host": ["{{baseUrl}}"],
							"path": ["users", "maker", "earnings"]
						}
					}
				},
				{
					"name": "Get Maker Earnings - Unauthorized (No Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', () => {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/maker/earnings",
							"host": ["{{baseUrl}}"],
							"path": ["users", "maker", "earnings"]
						}
					}
				},
				{
					"name": "Get Maker Earnings - Forbidden (Creator Role)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This test assumes you've logged in as a creator first"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', () => {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Response indicates forbidden access', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Forbidden');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/maker/earnings",
							"host": ["{{baseUrl}}"],
							"path": ["users", "maker", "earnings"]
						}
					}
				}
			]
		}
	]
}